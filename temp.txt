<div id="disqus_thread"></div>
<script>
    /**
     *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
     *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables
     */
    /*
    var disqus_config = function () {
        this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
        this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    */
    (function() {  // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');

        s.src = 'https://niklasrosenstein-com.disqus.com/embed.js';

        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>





class Site(object):
  """
  Represents information on a set of static websites (eg. API docs).
  These are generated from the JSON configuration. Possible configuration
  values are:


  """

  def __init__(self, name, slug, path, aliases=None, index_files=None,
               index_redirect='latest', version_sort=None, header_style=None,
               header_script=None, cdn_scripts=None):
    if aliases is None:
      aliases = {'latest': lambda versions: versions[-1]}
    if index_files is None:
      index_files = ['index.html', 'index.htm']
    if version_sort is None:
      version_sort = lambda v1, v2: v1.lower() > v2.lower()
    if cdn_scripts is None:
      cdn_scripts = ['https://d3js.org/d3.v4.js']

    self.name = name
    self.slug = slug
    self.path = path
    self.aliases = aliases
    self.index_files = index_files
    self.index_redirect = index_redirect
    self.version_sort = version_sort
    self.header_style = header_style
    self.header_script = header_script
    self.cdn_scripts = cdn_scripts

  def get_header_style(self):
    if self.header_style:
      return self.header_style
    filename = os.path.join(self.path, '_docbrowser/style.css')
    if os.path.isfile(filename):
      return filename
    return None

  def get_header_script(self):
    if self.header_script:
      return self.header_script
    filename = os.path.join(self.path, '_docbrowser/script.js')
    if os.path.isfile(filename):
      return filename
    return None

  def get_header_style_url(self):
    slug = self.slug if self.get_header_style() else 'docbrowser'
    return '/static/{}/style.css'.format(slug)

  def get_header_script_url(self):
    slug = self.slug if self.get_header_style() else 'docbrowser'
    return '/static/{}/script.js'.format(slug)

  def get_versions(self, aliases=True):
    """
    Lists the available versions and returns it sorted. All defined aliases
    will be prepended unless *aliases* is False.
    """

    versions = []
    if os.path.isdir(self.path):
      for item in os.listdir(self.path):
        if os.path.isdir(os.path.join(self.path, item)):
          versions.append(item)
      versions.sort(cmp=self.version_sort)
      if aliases:
        versions = sorted(self.aliases.keys()) + versions
    return versions